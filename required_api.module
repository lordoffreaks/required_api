<?php
/**
 * @file
 * Allows certain user roles to be exempt from required fields
 */

/**
 * Implements hook_help().
 */
function required_api_help($path, $arg) {
  switch ($path) {

    case 'admin/help#required_api':
      $output = '';
      $output .= '<p>' . t('The Required by role module provides an easy and
        flexible way for developers and site builders to determine whether a
        field (instance) should be <em>required</em> by all users or just for
        selected user roles.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function required_api_permission() {
  return array(
    'administer required settings' => array(
      'title' => t('Administer required settings'),
      'description' => t('Administer global required settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function required_api_menu() {
  $items = array();

  $items['admin/config/user-interface/required'] = array(
    'title' => 'Required strategy',
    'description' => 'Choose the default required strategy for fields.',
    'route_name' => 'required_api.default_plugin',
    'weight' => -20,
  );

  return $items;
}

/**
 * Implements hook_field_info_alter().
 */
function required_api_field_info_alter(&$info) {

  foreach ($info as $field_type => $field_type_info) {
    $info[$field_type]['instance_settings'] += array(
      'required_plugin' => NULL,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Applies to FORM_ID field_ui_field_instance_edit_form.
 */
function required_api_form_field_ui_field_instance_edit_form_alter(&$form, $form_state) {

  $field_definition = $form_state['instance'];
  $field_name = $field_definition->getName();

  $required_api_manager = \Drupal::service('plugin.manager.required_api.required');

  // Caching the manager for AJAX calls.
  $form['#required_api_manager'] = $required_api_manager;

  $plugins = $required_api_manager->getDefinitionsAsOptions();

  if (!empty($form_state['values']['instance']['settings']['required_plugin'])) {
    $plugin_id = $form_state['values']['instance']['settings']['required_plugin'];
  }
  else {

    $plugin_id = $field_definition->getSetting('required_plugin');

    if (!$plugin_id) {
      $plugin_id = \Drupal::config('required_api.plugins')->get('default_plugin');
    }

  }

  $plugin = required_api_get_required_plugin($required_api_manager, $plugin_id, $field_definition);

  $form['instance']['required_plugin'] = array(
    '#title' => t('Required strategy'),
    '#type' => 'radios',
    '#options' => $plugins,
    '#default_value' => $plugin_id,
    '#weight' => $form['instance']['required']['#weight'] - 1,
    '#ajax' => array(
      'callback' => 'require_api_element_ajax_callback',
      'wrapper' => 'required-ajax-wrapper',
      'effect' => 'fade',
      'speed' => 'fast',
    ),
    '#parents' => array('instance', 'settings', 'required_plugin'),
  );

  $form['instance']['required'] = $plugin->formElement($field_definition);

  // Default value needs allways to be NOT required.
  $form['instance']['default_value'][$field_name]['widget'][0]['#required'] = FALSE;
  $form['instance']['default_value'][$field_name]['widget'][0]['value']['#required'] = FALSE;

}

/**
 * Creates an instance of the required plugin.
 *
 * @return array
 *   The rendered parent page select element.
 */
function required_api_get_required_plugin($manager, $plugin_id, $field_definition) {

  $options = array(
    'plugin_id' => $plugin_id,
    'field_definition' => $field_definition,
  );

  return $manager->getInstance($options);
}

/**
 * Renders the form element to select the required property.
 *
 * @return array
 *   The rendered element.
 */
function require_api_element_ajax_callback($form, $form_state) {
  return $form['instance']['required'];
}
